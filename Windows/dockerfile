# escape=`

# Use the latest Windows Server Core 2025 image.
FROM mcr.microsoft.com/windows/servercore:ltsc2025

# Input GitHub runner version argument
ARG RUNNER_VERSION

# Additional label information
LABEL Author="Andrew Aye"
LABEL Email="github.sublime362@passmail.net"
LABEL GitHub="https://github.com/teikitu/teikitu-release"
LABEL BaseImage="servercore:ltsc2025"
LABEL RunnerVersion=${RUNNER_VERSION}

# Set the default shell
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]

# Set working directory
WORKDIR /actions-runner

# Install custom CMake
ADD cmake-3.31.0-gb262cf9-win32-x86.exe .
RUN .\cmake-3.31.0-gb262cf9-win32-x86.exe /S /D=C:\Program Files\CMake
RUN setx /M PATH $(${Env:PATH} + \";${Env:ProgramFiles}\CMake\bin\")

# Restore the default Windows shell for correct batch processing.
SHELL ["cmd", "/S", "/C"]

# Set up environment to collect install errors.
COPY install.cmd C:\TEMP\
ADD https://aka.ms/vscollect.exe C:\TEMP\collect.exe

# Install Node.js LTS
ADD https://nodejs.org/dist/v8.11.3/node-v8.11.3-x64.msi C:\TEMP\node-install.msi
RUN start /wait msiexec.exe /i C:\TEMP\node-install.msi /l*vx "%TEMP%\MSI-node-install.log" /qn ADDLOCAL=ALL

# Download channel for fixed install.
ARG CHANNEL_URL=https://aka.ms/vs/17/release/channel
ADD ${CHANNEL_URL} C:\TEMP\VisualStudio.chman

# Download and install Build Tools for Visual Studio 2022 for native desktop workload.
ADD https://aka.ms/vs/17/release/vs_buildtools.exe C:\TEMP\vs_buildtools.exe
RUN C:\TEMP\install.cmd C:\TEMP\vs_buildtools.exe --quiet --wait --norestart --nocache `
    --channelUri C:\TEMP\VisualStudio.chman `
    --installChannelUri C:\TEMP\VisualStudio.chman `
    --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended`
    --installPath C:\BuildTools

# Set the default shell
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]

# Install the Vulkan SDK
RUN curl -o VulkanSDK-1.3.296.0-Installer.exe https://sdk.lunarg.com/sdk/download/1.3.296.0/windows/VulkanSDK-1.3.296.0-Installer.exe
RUN .\VulkanSDK-1.3.296.0-Installer.exe --accept-licenses --default-answer --confirm-command install
ENV VULKAN_SDK=C:\VulkanSDK\1.3.296.0
RUN setx /M PATH $(${Env:PATH} + \";C:\VulkanSDK\1.3.296.0\")

# Install chocolatey
ADD install-choco.ps1 .
RUN .\install-choco.ps1 -Wait; `
    Remove-Item .\install-choco.ps1 -Force

# Manually remove an old ssh-agent service
RUN sc.exe delete ssh-agent
RUN choco install -y openssh -params '"/SSHAgentFeature"' --no-progress -y
ENV GIT_SSH="C:\Program Files\OpenSSH-Win64\ssh.exe"

# Install dependencies
RUN choco install -y python3 --version=3.11.5
RUN choco install -y ninja
RUN choco install -y powershell-core
RUN choco install -y azure-cli
RUN choco install -y llvm --version 19.1.5
RUN choco config set llvm_dir "C:\Program Files\LLVM\bin"
RUN choco install -y winflexbison3
RUN choco install -y git
RUN choco install -y gh

# Install Python and dependencies needed for OpenUSD
RUN python.exe -m pip install --upgrade pip
RUN pip3 install Jinja2
RUN pip3 install PyOpenGL
RUN pip3 install pyside6==6.5.1.1 --ignore-installed

# Download GitHub Runner based on RUNNER_VERSION argument (Can use: Docker build --build-arg RUNNER_VERSION=x.y.z)
RUN Invoke-WebRequest -Uri "https://github.com/actions/runner/releases/download/v$env:RUNNER_VERSION/actions-runner-win-x64-$env:RUNNER_VERSION.zip" -OutFile "actions-runner.zip"; `
    Expand-Archive -Path ".\\actions-runner.zip" -DestinationPath '.'; `
    Remove-Item ".\\actions-runner.zip" -Force

# Add GitHub runner configuration startup script
ADD start.ps1 .

# Use developer command prompt and start PowerShell if no other command specified.
ENTRYPOINT ["C:\\BuildTools\\Common7\\Tools\\VsDevCmd.bat", "&&", "pwsh.exe", "-NoLogo", "-ExecutionPolicy", "Bypass", "./start.ps1"]